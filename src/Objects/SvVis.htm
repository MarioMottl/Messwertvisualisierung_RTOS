<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\SvVis.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\SvVis.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Tue Mar 23 17:56:38 2021
<BR><P>
<H3>Maximum Stack Usage =        132 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; usart::usart::init(USART_TypeDef*, unsigned, unsigned) &rArr; USART_Init &rArr; RCC_GetClocksFreq
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[51]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[c]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">NMI_Handler</a><BR>
 <LI><a href="#[d]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">HardFault_Handler</a><BR>
 <LI><a href="#[e]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">MemManage_Handler</a><BR>
 <LI><a href="#[f]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">BusFault_Handler</a><BR>
 <LI><a href="#[10]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">UsageFault_Handler</a><BR>
 <LI><a href="#[12]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">DebugMon_Handler</a><BR>
 <LI><a href="#[27]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[27]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3d]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1c]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">HardFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[c]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">PendSV_Handler</a> from irq_cm3.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3e]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4b]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[39]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">SVC_Handler</a> from irq_cm3.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">SysTick_Handler</a> from irq_cm3.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[40]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[17]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3a]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3b]">USART2_IRQHandler</a> from usart.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3c]">USART3_IRQHandler</a> from usart.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3f]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[44]">main_thread(void*)</a> from main.o(i._Z11main_threadPv) referenced from main.o(i.main)
 <LI><a href="#[45]">send_tri_data(void*)</a> from main.o(i._Z13send_tri_dataPv) referenced from main.o(i.main)
 <LI><a href="#[43]">SvVis::SvVis::func_recv(void*)</a> from svvis_threads.o(i._ZN5SvVis5SvVis9func_recvEPv) referenced from svvis.o(i._ZN5SvVis5SvVis4initERN6serial9interfaceEjj)
 <LI><a href="#[42]">SvVis::SvVis::func_send(void*)</a> from svvis_threads.o(i._ZN5SvVis5SvVis9func_sendEPv) referenced from svvis.o(i._ZN5SvVis5SvVis4initERN6serial9interfaceEjj)
 <LI><a href="#[48]">usart::usart::put_blocking(const void*, unsigned)</a> from usart.o(i._ZN5usart5usart12put_blockingEPKvj) referenced from usart.o(.constdata__ZTVN5usart5usartE)
 <LI><a href="#[46]">usart::usart::pop(unsigned char&, unsigned)</a> from usart.o(i._ZN5usart5usart3popERhj) referenced from usart.o(.constdata__ZTVN5usart5usartE)
 <LI><a href="#[47]">usart::usart::put(unsigned char, unsigned)</a> from usart.o(i._ZN5usart5usart3putEhj) referenced from usart.o(.constdata__ZTVN5usart5usartE)
 <LI><a href="#[49]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 4 times from main.o(.constdata__ZTVN6serial9interfaceE)
 <LI><a href="#[4c]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[4a]">__sti___8_main_cpp_usart1</a> from main.o(i.__sti___8_main_cpp_usart1) referenced from main.o(.init_array)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[53]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[55]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[dd]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[de]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[df]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[e0]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[e1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[5c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[e2]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[e3]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[e4]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[e5]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[56]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[e6]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[e7]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[e8]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[e9]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[ea]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[eb]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[ed]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[ef]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[f1]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[f2]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[f4]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[f5]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[61]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[f7]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[f8]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[f9]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[fa]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[fb]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[fc]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[fd]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[54]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[fe]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[57]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[59]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postsh_1 &rArr; _platform_post_stackheap_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[5b]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[5d]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; usart::usart::init(USART_TypeDef*, unsigned, unsigned) &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[ff]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[70]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[60]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[100]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[62]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[4b]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))

<P><STRONG><a name="[c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[11]"></a>SVC_Handler</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, irq_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_cm3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_cm3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxTimerTick &rArr; osMessageQueuePut &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[66]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[101]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolNew
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[6a]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[103]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvVis::SvVis::func_recv(void*)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[104]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[105]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[6b]"></a>__rt_SIGPVFN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[6c]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[63]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[58]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[5f]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[6e]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
</UL>

<P><STRONG><a name="[71]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[109]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[10a]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>osDelay</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_delay.o(.text.osDelay))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tri_data(void*)
</UL>

<P><STRONG><a name="[be]"></a>osEventFlagsClear</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, rtx_evflags.o(.text.osEventFlagsClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osEventFlagsClear
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvVis::SvVis::func_recv(void*)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvVis::SvVis::send_msg(SvVis::message_t&, unsigned)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvVis::SvVis::init(serial::interface&, unsigned, unsigned)
</UL>

<P><STRONG><a name="[bd]"></a>osEventFlagsNew</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rtx_evflags.o(.text.osEventFlagsNew))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvVis::SvVis::init(serial::interface&, unsigned, unsigned)
</UL>

<P><STRONG><a name="[72]"></a>osEventFlagsSet</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, rtx_evflags.o(.text.osEventFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osEventFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvVis::SvVis::func_send(void*)
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvVis::SvVis::func_recv(void*)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvVis::SvVis::init(serial::interface&, unsigned, unsigned)
</UL>

<P><STRONG><a name="[bf]"></a>osEventFlagsWait</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, rtx_evflags.o(.text.osEventFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osEventFlagsWait
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvVis::SvVis::func_send(void*)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvVis::SvVis::send_msg(SvVis::message_t&, unsigned)
</UL>

<P><STRONG><a name="[dc]"></a>osKernelGetState</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetState), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[da]"></a>osKernelInitialize</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>osKernelStart</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelStart))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>osMemoryPoolAlloc</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osMemoryPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_pipe::init(unsigned)
</UL>

<P><STRONG><a name="[d3]"></a>osMemoryPoolNew</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rtx_mempool.o(.text.osMemoryPoolNew))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_pipe::init(unsigned)
</UL>

<P><STRONG><a name="[74]"></a>osMessageQueueGet</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osMessageQueueGet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvVis::SvVis::func_send(void*)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvVis::SvVis::recv_msg(SvVis::message_t&, unsigned)
</UL>

<P><STRONG><a name="[c1]"></a>osMessageQueueGetCount</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.osMessageQueueGetCount))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvVis::SvVis::func_send(void*)
</UL>

<P><STRONG><a name="[bb]"></a>osMessageQueueNew</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.osMessageQueueNew))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvVis::SvVis::init(serial::interface&, unsigned, unsigned)
</UL>

<P><STRONG><a name="[76]"></a>osMessageQueuePut</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osMessageQueuePut &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvVis::SvVis::func_recv(void*)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvVis::SvVis::send_msg(SvVis::message_t&, unsigned)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[d6]"></a>osMutexAcquire</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexAcquire), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[d7]"></a>osMutexDelete</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexDelete), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>

<P><STRONG><a name="[d8]"></a>osMutexNew</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexNew), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>

<P><STRONG><a name="[d9]"></a>osMutexRelease</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexRelease), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
</UL>

<P><STRONG><a name="[78]"></a>osRtxEventFlagsPostProcess</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, rtx_evflags.o(.text.osRtxEventFlagsPostProcess), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
</UL>

<P><STRONG><a name="[8e]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, rtx_memory.o(.text.osRtxMemoryAlloc), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolNew
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[9d]"></a>osRtxMemoryFree</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, rtx_memory.o(.text.osRtxMemoryFree), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolNew
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[94]"></a>osRtxMemoryInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rtx_memory.o(.text.osRtxMemoryInit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[77]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[7e]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolFree), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[95]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rtx_mempool.o(.text.osRtxMemoryPoolInit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[7b]"></a>osRtxMemoryPoolPostProcess</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolPostProcess), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>

<P><STRONG><a name="[7d]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 446 bytes, Stack size 32 bytes, rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[80]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRelease), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[64]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, rtx_system.o(.text.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[73]"></a>osRtxPostProcess</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[83]"></a>osRtxSemaphorePostProcess</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.osRtxSemaphorePostProcess), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>

<P><STRONG><a name="[87]"></a>osRtxSysTimerAckIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_system.o(.text.osRtxSysTimerAckIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[99]"></a>osRtxSysTimerEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtx_system.o(.text.osRtxSysTimerEnable), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[98]"></a>osRtxSysTimerSetup</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rtx_system.o(.text.osRtxSysTimerSetup), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[89]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadDelayTick
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[81]"></a>osRtxThreadDispatch</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[7c]"></a>osRtxThreadListGet</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListGet), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolPostProcess
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[91]"></a>osRtxThreadListPut</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListPut), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolAlloc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[79]"></a>osRtxThreadListRemove</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[a2]"></a>osRtxThreadListSort</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListSort), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[10d]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadPostProcess), UNUSED)

<P><STRONG><a name="[8a]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadReadyPut))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[7f]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadRegPtr), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[84]"></a>osRtxThreadStackCheck</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadStackCheck))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[85]"></a>osRtxThreadSwitch</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadSwitch))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[86]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadWaitEnter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMemoryPoolAlloc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[7a]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadWaitExit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolPostProcess
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[65]"></a>osRtxTick_Handler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxTick_Handler &rArr; osRtxTimerTick &rArr; osMessageQueuePut &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSysTimerAckIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[88]"></a>osRtxTimerTick</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, rtx_timer.o(.text.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[d0]"></a>osSemaphoreAcquire</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.osSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_pipe::put(unsigned char, unsigned)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_pipe::pop(unsigned char&, unsigned)
</UL>

<P><STRONG><a name="[d2]"></a>osSemaphoreNew</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.osSemaphoreNew))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_pipe::init(unsigned)
</UL>

<P><STRONG><a name="[8b]"></a>osSemaphoreRelease</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_pipe::put(unsigned char, unsigned)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_pipe::pop(unsigned char&, unsigned)
</UL>

<P><STRONG><a name="[10e]"></a>osThreadExit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadExit), UNUSED)

<P><STRONG><a name="[bc]"></a>osThreadNew</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadNew))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvVis::SvVis::init(serial::interface&, unsigned, unsigned)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>osThreadYield</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadYield))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart::usart::put(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[8c]"></a>svcRtxDelay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_delay.o(.text.svcRtxDelay), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[10f]"></a>svcRtxEventFlagsClear</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rtx_evflags.o(.text.svcRtxEventFlagsClear), UNUSED)

<P><STRONG><a name="[8d]"></a>svcRtxEventFlagsNew</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, rtx_evflags.o(.text.svcRtxEventFlagsNew), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>

<P><STRONG><a name="[8f]"></a>svcRtxEventFlagsSet</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, rtx_evflags.o(.text.svcRtxEventFlagsSet), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
</UL>

<P><STRONG><a name="[90]"></a>svcRtxEventFlagsWait</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, rtx_evflags.o(.text.svcRtxEventFlagsWait), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>

<P><STRONG><a name="[110]"></a>svcRtxKernelGetState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetState), UNUSED)

<P><STRONG><a name="[92]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 428 bytes, Stack size 24 bytes, rtx_kernel.o(.text.svcRtxKernelInitialize), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>

<P><STRONG><a name="[96]"></a>svcRtxKernelStart</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, rtx_kernel.o(.text.svcRtxKernelStart), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSysTimerSetup
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSysTimerEnable
</UL>

<P><STRONG><a name="[9a]"></a>svcRtxMemoryPoolAlloc</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, rtx_mempool.o(.text.svcRtxMemoryPoolAlloc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>

<P><STRONG><a name="[9b]"></a>svcRtxMemoryPoolNew</STRONG> (Thumb, 508 bytes, Stack size 40 bytes, rtx_mempool.o(.text.svcRtxMemoryPoolNew), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[9e]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 410 bytes, Stack size 40 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueGet), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[111]"></a>svcRtxMessageQueueGetCount</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueGetCount), UNUSED)

<P><STRONG><a name="[9f]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueNew), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[a0]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueuePut), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[a1]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexAcquire), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>

<P><STRONG><a name="[a3]"></a>svcRtxMutexDelete</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, rtx_mutex.o(.text.svcRtxMutexDelete), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>

<P><STRONG><a name="[a4]"></a>svcRtxMutexNew</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexNew), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>

<P><STRONG><a name="[a5]"></a>svcRtxMutexRelease</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexRelease), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>

<P><STRONG><a name="[a6]"></a>svcRtxSemaphoreAcquire</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreAcquire), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>

<P><STRONG><a name="[a7]"></a>svcRtxSemaphoreNew</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreNew), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>

<P><STRONG><a name="[a8]"></a>svcRtxSemaphoreRelease</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreRelease), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>

<P><STRONG><a name="[a9]"></a>svcRtxThreadExit</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadExit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>

<P><STRONG><a name="[97]"></a>svcRtxThreadNew</STRONG> (Thumb, 576 bytes, Stack size 48 bytes, rtx_thread.o(.text.svcRtxThreadNew), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[ab]"></a>svcRtxThreadYield</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadYield), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>

<P><STRONG><a name="[c9]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart::usart::init(USART_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[cc]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart::usart::init(USART_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[ca]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart::usart::init(USART_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[b3]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[c8]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart::usart::init(USART_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[b2]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[b5]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[c7]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart::usart::init(USART_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[40]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>USART1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART1_IRQHandler &rArr; ring_pipe::put(unsigned char, unsigned) &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_pipe::put(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USART2_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART2_IRQHandler &rArr; ring_pipe::put(unsigned char, unsigned) &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_pipe::put(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USART3_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART3_IRQHandler &rArr; ring_pipe::put(unsigned char, unsigned) &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_pipe::put(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[cb]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart::usart::init(USART_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[cf]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart::usart::init(USART_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[b1]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart::usart::init(USART_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[c4]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart::usart::put(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[cd]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart::usart::init(USART_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[b4]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart::usart::init(USART_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[af]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart::usart::put(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[44]"></a>main_thread(void*)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i._Z11main_threadPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = main_thread(void*) &rArr; SvVis::SvVis::send_msg(SvVis::message_t&, unsigned) &rArr; osMessageQueuePut &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvVis::SvVis::send_msg(SvVis::message_t&, unsigned)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvVis::SvVis::recv_msg(SvVis::message_t&, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[45]"></a>send_tri_data(void*)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, main.o(i._Z13send_tri_dataPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = send_tri_data(void*) &rArr; SvVis::SvVis::send_i16(unsigned char, short, unsigned) &rArr; SvVis::SvVis::send_msg(SvVis::message_t&, unsigned) &rArr; osMessageQueuePut &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvVis::SvVis::send_i16(unsigned char, short, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[ba]"></a>SvVis::SvVis::init(serial::interface&, unsigned, unsigned)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, svvis.o(i._ZN5SvVis5SvVis4initERN6serial9interfaceEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SvVis::SvVis::init(serial::interface&, unsigned, unsigned) &rArr; osEventFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsClear
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>SvVis::SvVis::recv_msg(SvVis::message_t&, unsigned)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, svvis.o(i._ZN5SvVis5SvVis8recv_msgERNS_9message_tEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SvVis::SvVis::recv_msg(SvVis::message_t&, unsigned) &rArr; osMessageQueueGet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread(void*)
</UL>

<P><STRONG><a name="[b8]"></a>SvVis::SvVis::send_i16(unsigned char, short, unsigned)</STRONG> (Thumb, 50 bytes, Stack size 64 bytes, svvis.o(i._ZN5SvVis5SvVis8send_i16Ehsj))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SvVis::SvVis::send_i16(unsigned char, short, unsigned) &rArr; SvVis::SvVis::send_msg(SvVis::message_t&, unsigned) &rArr; osMessageQueuePut &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvVis::SvVis::send_msg(SvVis::message_t&, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_tri_data(void*)
</UL>

<P><STRONG><a name="[b7]"></a>SvVis::SvVis::send_msg(SvVis::message_t&, unsigned)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, svvis.o(i._ZN5SvVis5SvVis8send_msgERNS_9message_tEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SvVis::SvVis::send_msg(SvVis::message_t&, unsigned) &rArr; osMessageQueuePut &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsClear
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvVis::SvVis::send_i16(unsigned char, short, unsigned)
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread(void*)
</UL>

<P><STRONG><a name="[43]"></a>SvVis::SvVis::func_recv(void*)</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, svvis_threads.o(i._ZN5SvVis5SvVis9func_recvEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SvVis::SvVis::func_recv(void*) &rArr; osMessageQueuePut &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsClear
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvVis::chid2len(unsigned char)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> svvis.o(i._ZN5SvVis5SvVis4initERN6serial9interfaceEjj)
</UL>
<P><STRONG><a name="[42]"></a>SvVis::SvVis::func_send(void*)</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, svvis_threads.o(i._ZN5SvVis5SvVis9func_sendEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SvVis::SvVis::func_send(void*) &rArr; osMessageQueueGet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGetCount
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> svvis.o(i._ZN5SvVis5SvVis4initERN6serial9interfaceEjj)
</UL>
<P><STRONG><a name="[c0]"></a>SvVis::chid2len(unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, svvis_threads.o(i._ZN5SvVis8chid2lenEh))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvVis::SvVis::func_recv(void*)
</UL>

<P><STRONG><a name="[48]"></a>usart::usart::put_blocking(const void*, unsigned)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, usart.o(i._ZN5usart5usart12put_blockingEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usart::usart::put_blocking(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata__ZTVN5usart5usartE)
</UL>
<P><STRONG><a name="[46]"></a>usart::usart::pop(unsigned char&, unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usart.o(i._ZN5usart5usart3popERhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usart::usart::pop(unsigned char&, unsigned) &rArr; ring_pipe::pop(unsigned char&, unsigned) &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_pipe::pop(unsigned char&, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata__ZTVN5usart5usartE)
</UL>
<P><STRONG><a name="[47]"></a>usart::usart::put(unsigned char, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usart.o(i._ZN5usart5usart3putEhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart::usart::put(unsigned char, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata__ZTVN5usart5usartE)
</UL>
<P><STRONG><a name="[c6]"></a>usart::usart::init(USART_TypeDef*, unsigned, unsigned)</STRONG> (Thumb, 420 bytes, Stack size 56 bytes, usart.o(i._ZN5usart5usart4initEP13USART_TypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = usart::usart::init(USART_TypeDef*, unsigned, unsigned) &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClockInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_pipe::init(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>ring_pipe::pop(unsigned char&, unsigned)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ring_pipe.o(i._ZN9ring_pipe3popERhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ring_pipe::pop(unsigned char&, unsigned) &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_pipe::access(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart::usart::pop(unsigned char&, unsigned)
</UL>

<P><STRONG><a name="[b0]"></a>ring_pipe::put(unsigned char, unsigned)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ring_pipe.o(i._ZN9ring_pipe3putEhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ring_pipe::put(unsigned char, unsigned) &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_pipe::access(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[ce]"></a>ring_pipe::init(unsigned)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ring_pipe.o(i._ZN9ring_pipe4initEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ring_pipe::init(unsigned) &rArr; osMemoryPoolAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolNew
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemoryPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart::usart::init(USART_TypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[d1]"></a>ring_pipe::access(unsigned char*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ring_pipe.o(i._ZN9ring_pipe6accessEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ring_pipe::access(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_pipe::put(unsigned char, unsigned)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_pipe::pop(unsigned char&, unsigned)
</UL>

<P><STRONG><a name="[49]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTVN6serial9interfaceE)
</UL>
<P><STRONG><a name="[4d]"></a>_mutex_acquire</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_lib.o(i._mutex_acquire), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mutex_acquire &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[4e]"></a>_mutex_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_lib.o(i._mutex_free), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mutex_free
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[4f]"></a>_mutex_initialize</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtx_lib.o(i._mutex_initialize), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mutex_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[50]"></a>_mutex_release</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtx_lib.o(i._mutex_release), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mutex_release &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[5a]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtx_lib.o(i._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _platform_post_stackheap_init
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postsh_1
</UL>

<P><STRONG><a name="[5e]"></a>main</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = main &rArr; usart::usart::init(USART_TypeDef*, unsigned, unsigned) &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart::usart::init(USART_TypeDef*, unsigned, unsigned)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvVis::SvVis::init(serial::interface&, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[82]"></a>osRtxErrorNotify</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_config.o(i.osRtxErrorNotify))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>

<P><STRONG><a name="[112]"></a>osRtxIdleThread</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_config.o(i.osRtxIdleThread), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4a]"></a>__sti___8_main_cpp_usart1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.__sti___8_main_cpp_usart1))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[d5]"></a>os_kernel_is_active</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtx_lib.o(i.os_kernel_is_active), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[ac]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[ad]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
